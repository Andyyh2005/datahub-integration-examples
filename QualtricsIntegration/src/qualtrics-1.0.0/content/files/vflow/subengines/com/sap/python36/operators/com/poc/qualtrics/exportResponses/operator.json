{"description":"Qualtrics Export Responses","component":"com.sap.system.python3Operator","outports":[{"name":"responses","type":"string"},{"name":"terminate","type":"string"}],"iconsrc":"qualtrics-xm-long.svg","config":{"$type":"http://sap.com/vflow/com.poc.qualtrics.exportResponses.configSchema.json","apiToken":"","dataCenter":"","recurrence":0,"script":"# Python 3\n\nimport requests\nimport zipfile\nimport json\nimport io\nimport datetime\nimport time\nimport pytz\nfrom dateutil import parser\n\ntz = pytz.timezone('UTC')\n\n# Setting user Parameters\napiToken = api.config.apiToken\nbody = {}\nbody['surveyId'] = api.config.surveyID\nbody['format'] = \"csv\"\ndataCenter = api.config.dataCenter\nrecurrence = api.config.recurrence\n\nfirst = True\n\nwhile True:\n    # Setting static parameters\n    requestCheckProgress = 0\n    progressStatus = \"in progress\"\n    baseUrl = \"https://{0}.qualtrics.com/API/v3/responseexports/\".format(dataCenter)\n    headers = {\n        \"content-type\": \"application/json\",\n        \"x-api-token\": apiToken,\n        }\n\n    if not first:\n        body['startDate'] = body['endDate']\n    else:\n        if hasattr(api.config,'startDate'):\n            body['startDate'] = tz.localize(parser.parse(api.config.startDate)).replace(microsecond=0).isoformat()\n    \n    \n    body['endDate'] = tz.localize(datetime.datetime.now()).replace(microsecond=0).isoformat()\n\n    # Step 1: Creating Data Export\n    downloadRequestUrl = baseUrl\n    downloadRequestPayload = json.dumps(body)\n    downloadRequestResponse = requests.request(\"POST\", downloadRequestUrl, data=downloadRequestPayload, headers=headers)\n    print(downloadRequestResponse.text)\n    progressId = downloadRequestResponse.json()[\"result\"][\"id\"]\n\n    # Step 2: Checking on Data Export Progress and waiting until export is ready\n\n    isFile = None\n\n    while requestCheckProgress \u003c 100 and progressStatus is not \"complete\" and isFile is None:\n        requestCheckUrl = baseUrl + progressId\n        requestCheckResponse = requests.request(\"GET\", requestCheckUrl, headers=headers)\n        isFile = (requestCheckResponse.json()[\"result\"][\"file\"])\n        if isFile is None:\n            print (\"file not ready\")\n        else:\n            print (\"file created:\", requestCheckResponse.json()[\"result\"][\"file\"])\n            requestCheckProgress = requestCheckResponse.json()[\"result\"][\"percentComplete\"]\n            print(\"Download is \" + str(requestCheckProgress) + \" complete\")\n\n    # Step 3: Downloading file\n    requestDownloadUrl = baseUrl + progressId + '/file'\n    requestDownload = requests.request(\"GET\", requestDownloadUrl, headers=headers, stream=True)\n\n    # Step 4: Unzipping the file\n    # zipfile.ZipFile(io.BytesIO(requestDownload.content)).extractall(\"MyQualtricsDownload\")\n    responsesZip = zipfile.ZipFile(io.BytesIO(requestDownload.content))\n    responsesFiles = responsesZip.namelist()\n\n    responseFile = responsesZip.open(responsesFiles[0])\n\n    # sent result to output port\n    api.send(\"responses\", responsesZip.read(responsesFiles[0]))\n\n    # finalize\n    if recurrence \u003c= 0:\n        break;\n        \n    first = False\n    time.sleep(recurrence * 60)\n\napi.send(\"terminate\", \"True\")"},"tags":{"qualtrics":""}}